version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper

  kafka-broker1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-broker1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker1:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
    ports:
      - "9092:9092"
    volumes:
      - kafka_data_broker1:/var/lib/kafka

  kafka-broker2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-broker2
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker2:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
    ports:
      - "9094:9094"
    volumes:
      - kafka_data_broker2:/var/lib/kafka

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    depends_on:
      - kafka-broker1
      - kafka-broker2
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka-broker1:9092,PLAINTEXT://kafka-broker2:9094
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8082
    ports:
      - "8082:8082"
    volumes:
      - schema_registry_data:/var/lib/schema-registry

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - "9095:9095"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"

  hdfs-namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: hdfs-namenode
    environment:
      - CLUSTER_NAME=test-hadoop
      - CORE_CONF_fs_defaultFS=hdfs://hdfs-namenode:9001
    ports:
      - "9870:9870"
      - "9001:9000"
    volumes:
      - hdfs_namenode_data:/hadoop/dfs/name

  hdfs-datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: hdfs-datanode
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://hdfs-namenode:9001
    depends_on:
      - hdfs-namenode
    ports:
      - "9864:9864"
    volumes:
      - hdfs_datanode_data:/hadoop/dfs/data

  flink-jobmanager:
    image: flink:1.15.2
    container_name: flink-jobmanager
    command: jobmanager
    ports:
      - "8083:8081"
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    depends_on:
      - kafka-broker1
      - kafka-broker2
    volumes:
      - flink_data:/opt/flink/data

  flink-taskmanager:
    image: flink:1.15.2
    container_name: flink-taskmanager
    command: taskmanager
    environment:
      - TASK_MANAGER_RPC_ADDRESS=flink-taskmanager
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    depends_on:
      - flink-jobmanager
    ports:
      - "8084:8081"
    volumes:
      - flink_data:/opt/flink/data

  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    environment:
      - SPARK_MODE=master
    ports:
      - "7078:7077"
      - "8085:8080"

  spark-worker:
    image: bitnami/spark:latest
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7078
    depends_on:
      - spark-master
    ports:
      - "8086:8081"

  debezium-connect:
    image: debezium/connect:latest
    container_name: debezium-connect
    depends_on:
      - kafka-broker1
      - kafka-broker2
    environment:
      - BOOTSTRAP_SERVERS=kafka-broker1:9092,kafka-broker2:9094
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=debezium-config
      - OFFSET_STORAGE_TOPIC=debezium-offsets
      - STATUS_STORAGE_TOPIC=debezium-status
      - CONNECT_PLUGIN_PATH=/kafka/connect
    volumes:
      - ./connect-plugins:/kafka/connect
    ports:
      - "8087:8083"

  postgres-source:
    image: postgres:latest
    container_name: postgres-source
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: sourcedb
    ports:
      - "5433:5432"
    volumes:
      - postgres_source_data:/var/lib/postgresql/data

  mysql-source:
    image: mysql:latest
    container_name: mysql-source
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: sourcedb
    ports:
      - "3307:3306"
    volumes:
      - mysql_source_data:/var/lib/mysql

  oracle-source:
    image: gvenzl/oracle-xe:latest
    container_name: oracle-source
    environment:
      ORACLE_PASSWORD: oracle
      APP_USER: appuser
      APP_USER_PASSWORD: appuser
    ports:
      - "1522:1521"
      - "5501:5500"
    volumes:
      - oracle_source_data:/opt/oracle

  sqlserver-source:
    image: mcr.microsoft.com/mssql/server:latest
    container_name: sqlserver-source
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "YourStrongPassword1"
    ports:
      - "1434:1433"
    volumes:
      - sqlserver_source_data:/var/opt/mssql

  powerbi:
    image: powerbi-report-server:latest
    container_name: powerbi
    ports:
      - "8088:80"

volumes:
  kafka_data_broker1:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "F:/DissertationLab/realtime-analytics-debezium-cdc/docker-data/kafka-broker1"

  kafka_data_broker2:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "F:/DissertationLab/realtime-analytics-debezium-cdc/docker-data/kafka-broker2"

  zookeeper_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "F:/DissertationLab/realtime-analytics-debezium-cdc/docker-data/zookeeper"

  schema_registry_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "F:/DissertationLab/realtime-analytics-debezium-cdc/docker-data/schema-registry"

  hdfs_namenode_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "F:/DissertationLab/realtime-analytics-debezium-cdc/docker-data/hdfs-namenode"

  hdfs_datanode_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "F:/DissertationLab/realtime-analytics-debezium-cdc/docker-data/hdfs-datanode"

  postgres_druid_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "F:/DissertationLab/realtime-analytics-debezium-cdc/docker-data/postgres-druid"

  postgres_source_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "F:/DissertationLab/realtime-analytics-debezium-cdc/docker-data/postgres-source"

  mysql_source_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "F:/DissertationLab/realtime-analytics-debezium-cdc/docker-data/mysql-source"

  sqlserver_source_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "F:/DissertationLab/realtime-analytics-debezium-cdc/docker-data/sqlserver-source"

  oracle_source_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "F:/DissertationLab/realtime-analytics-debezium-cdc/docker-data/oracle-source"

  grafana_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "F:/DissertationLab/realtime-analytics-debezium-cdc/docker-data/grafana"

  flink_data:
    driver: local
    driver_opts:
      type: "none"
      o: "bind"
      device: "F:/DissertationLab/realtime-analytics-debezium-cdc/docker-data/flink"
